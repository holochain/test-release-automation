name: Publish Release
on:
  push:
    branches:
      - main
      - main-0.1
      - main-0.2
    paths:
      - "Cargo.toml"
      - "Cargo.lock"
      - "CHANGELOG.md"

jobs:
  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo bins
        uses: actions/cache@v4
        id: cache-cargo-bins
        with:
          path: |
            ~/.cargo/bin/
          key: ${{ runner.os }}-cargo-bins-${{ hashFiles('**/Cargo.lock') }}-cocogitto

      - name: Install cocogitto
        if: steps.cache-cargo-bins.outputs.cache-hit != 'true'
        run: cargo install cocogitto

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -m 1 'version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub tag
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.RELEASE_PLZ_TOKEN }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${{ steps.get_version.outputs.tag_name }}`,
              sha: context.sha
            })

      - name: Generate release notes
        id: release_notes
        run: |
          PREV_TAG=$(git tag -l "v*" | grep -v "${{ steps.get_version.outputs.tag_name }}" | sort -V | tail -n 1)
          TEMP_DIR=$(mktemp -d)
          
          cog changelog --at $PREV_TAG | awk '$0 == "" && prev == "" && prevprev == "" {next} {prevprev=prev; prev=$0; print}' > "$TEMP_DIR/release_notes.md"
          
          echo 'notes<<RELEASE_NOTES_EOF' >> $GITHUB_OUTPUT
          cat "$TEMP_DIR/release_notes.md" >> $GITHUB_OUTPUT
          echo 'RELEASE_NOTES_EOF' >> $GITHUB_OUTPUT
          
          echo "notes_path=$TEMP_DIR/release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          name: ${{ steps.get_version.outputs.tag_name }}
          body_path: ${{ steps.release_notes.outputs.notes_path }}
          draft: false
          token: ${{ secrets.RELEASE_PLZ_TOKEN }}

      - name: Publish to crates.io
        run: |
          cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish
