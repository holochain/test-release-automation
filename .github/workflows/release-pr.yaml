name: Release PR

on:
  push:
    branches:
      - main

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: release-please-config.json
          token: ${{ secrets.RELEASE_PLZ_TOKEN }}
          target-branch: main

      - uses: actions/checkout@v4
        if: ${{ steps.release.outputs.release_created }}

      - name: Set up Rust toolchain
        if: ${{ steps.release.outputs.release_created }}
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo bins
        uses: actions/cache@v4
        id: cache-cargo-bins
        with:
          path: |
            ~/.cargo/bin/
          key: ${{ runner.os }}-cargo-bins-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        if: ${{ steps.release.outputs.release_created }}
        run: cargo build --release

      - name: Test
        if: ${{ steps.release.outputs.release_created }}
        run: cargo test

      - name: Install cargo-workspaces
        if: ${{ steps.release.outputs.release_created && steps.cache-cargo-bins.outputs.cache-hit != 'true' }}
        run: cargo install cargo-workspaces

      - name: Login to crates.io
        if: ${{ steps.release.outputs.release_created }}
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish crates
        if: ${{ steps.release.outputs.release_created }}
        run: cargo workspaces publish --yes --from-git

      - name: Create global GitHub Release
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching latest merged release PR..."
          PR_JSON=$(gh pr list --state merged --search "Release Please" --json number,body --limit 1 --base main)
          PR_BODY=$(echo "$PR_JSON" | jq -r '.[0].body')

          # You can pick a better source of truth for version if needed
          VERSION=$(grep '^version' crates/core/Cargo.toml | head -n1 | cut -d '"' -f2)
          TAG="workspace-v$VERSION"

          echo "Creating global GitHub Release with tag: $TAG"
          gh release create "$TAG" \
            --title "Workspace Release $VERSION" \
            --notes "$PR_BODY"
